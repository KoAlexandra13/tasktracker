[{"/frontend/src/index.js":"1","/frontend/src/serviceWorker.js":"2","/frontend/src/App/index.js":"3","/frontend/src/reducers/root.js":"4","/frontend/src/components/Auth/index.js":"5","/frontend/src/App/Home/index.js":"6","/frontend/src/App/CreateNewBoard/index.js":"7","/frontend/src/App/CreateNewTeam/index.js":"8","/frontend/src/App/SignUp/index.js":"9","/frontend/src/App/Account/index.js":"10","/frontend/src/reducers/boardNew.js":"11","/frontend/src/reducers/addBoard.js":"12","/frontend/src/reducers/user.js":"13","/frontend/src/actions/user.js":"14","/frontend/src/actions/boardList.js":"15","/frontend/src/actions/board.js":"16","/frontend/src/api/user.js":"17","/frontend/src/App/Login/index.js":"18","/frontend/src/api/auth.js":"19","/frontend/src/App/Header/index.js":"20","/frontend/src/App/CreateNewBoard/UploadImage/index.js":"21","/frontend/src/App/Footer/index.js":"22","/frontend/src/App/Home/BoardItem/index.js":"23","/frontend/src/App/CreateNewBoard/BackgroundItem/index.js":"24","/frontend/src/App/CreateNewBoard/BoardDemoColumn/index.js":"25","/frontend/src/api/board.js":"26","/frontend/src/App/Header/NavBar/index.js":"27","/frontend/src/App/Header/NavBar/BoardsPopup/index.js":"28","/frontend/src/App/Header/NavBar/SearchPopup/index.js":"29","/frontend/src/App/Header/NavBar/BoardsPopup/Favourites/index.js":"30","/frontend/src/App/Header/NavBar/BoardsPopup/FreqVisited/index.js":"31","/frontend/src/App/Header/NavBar/BoardsPopup/Personal/index.js":"32"},{"size":328,"mtime":1610880895199,"results":"33","hashOfConfig":"34"},{"size":5086,"mtime":1600792452819,"results":"35","hashOfConfig":"34"},{"size":1453,"mtime":1605195696156,"results":"36","hashOfConfig":"34"},{"size":331,"mtime":1605195696200,"results":"37","hashOfConfig":"34"},{"size":1535,"mtime":1605195696196,"results":"38","hashOfConfig":"34"},{"size":3410,"mtime":1610880895199,"results":"39","hashOfConfig":"34"},{"size":12941,"mtime":1610993567424,"results":"40","hashOfConfig":"34"},{"size":12202,"mtime":1610993567424,"results":"41","hashOfConfig":"34"},{"size":12140,"mtime":1605195696156,"results":"42","hashOfConfig":"34"},{"size":21905,"mtime":1610993567424,"results":"43","hashOfConfig":"34"},{"size":889,"mtime":1600792452819,"results":"44","hashOfConfig":"34"},{"size":587,"mtime":1600792452819,"results":"45","hashOfConfig":"34"},{"size":1299,"mtime":1610993567428,"results":"46","hashOfConfig":"34"},{"size":2884,"mtime":1610880895199,"results":"47","hashOfConfig":"34"},{"size":596,"mtime":1600792452819,"results":"48","hashOfConfig":"34"},{"size":1535,"mtime":1605195696156,"results":"49","hashOfConfig":"34"},{"size":1250,"mtime":1610993567428,"results":"50","hashOfConfig":"34"},{"size":6487,"mtime":1611002679148,"results":"51","hashOfConfig":"34"},{"size":256,"mtime":1610905382944,"results":"52","hashOfConfig":"34"},{"size":408,"mtime":1600792452815,"results":"53","hashOfConfig":"34"},{"size":577,"mtime":1605195696152,"results":"54","hashOfConfig":"34"},{"size":1190,"mtime":1610880895187,"results":"55","hashOfConfig":"34"},{"size":508,"mtime":1600792452815,"results":"56","hashOfConfig":"34"},{"size":828,"mtime":1600792452811,"results":"57","hashOfConfig":"34"},{"size":541,"mtime":1610880895175,"results":"58","hashOfConfig":"34"},{"size":382,"mtime":1605195696156,"results":"59","hashOfConfig":"34"},{"size":2853,"mtime":1610993295867,"results":"60","hashOfConfig":"34"},{"size":4183,"mtime":1605195696156,"results":"61","hashOfConfig":"34"},{"size":2027,"mtime":1600792452815,"results":"62","hashOfConfig":"34"},{"size":205,"mtime":1600792452815,"results":"63","hashOfConfig":"34"},{"size":207,"mtime":1600792452815,"results":"64","hashOfConfig":"34"},{"size":201,"mtime":1600792452815,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"vx7pyh",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/frontend/src/index.js",[],["134","135"],"/frontend/src/serviceWorker.js",[],"/frontend/src/App/index.js",[],"/frontend/src/reducers/root.js",[],"/frontend/src/components/Auth/index.js",[],"/frontend/src/App/Home/index.js",[],"/frontend/src/App/CreateNewBoard/index.js",[],"/frontend/src/App/CreateNewTeam/index.js",[],"/frontend/src/App/SignUp/index.js",[],"/frontend/src/App/Account/index.js",["136"],"import React from 'react';\nimport Header from '../Header';\nimport { connect } from 'react-redux';\nimport { HashLink } from 'react-router-hash-link';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport ImageUploading from 'react-images-uploading';\nimport _ from 'lodash';\nimport Footer from '../Footer'\nimport {uploadUserAvatarRequest, userSelfRequest} from '../../api/user'\nimport { uploadAvatarImage } from '../../actions/user';\n\n\nclass Account extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            openAvatarDialogWindow: false,\n            isImageUploaded: '',\n            avatarImageFile: null,\n            avatarImageURL: null,\n            openLogOutDialogWindow: false,\n            isCheckedInitialsCheckbox : false\n        }\n    }\n\n    getUserInitials = () => {\n        const firstAndSecondNames = this.props.fullname ? this.props.fullname.split(' ') : [];\n        return (firstAndSecondNames && firstAndSecondNames.length) ? firstAndSecondNames[0].charAt(0) + firstAndSecondNames[1].charAt(0) : null;\n    }\n\n    openChangeAvatarDialogWindow = () => {this.setState({...this.state, openAvatarDialogWindow: true})}\n\n    handleCloseDialogWindow = (prop) => () => {this.setState({...this.state, [prop]: false})}\n\n    handleUploadImage = (uploadedImage) => {\n        this.setState(\n            {\n                ...this.state, \n                avatarImageFile: uploadedImage[0].file,\n                avatarImageURL: uploadedImage[0].dataURL,\n                isImageUploaded: true,\n                isCheckedInitialsCheckbox : false\n            }\n        );\n    }\n\n    handleSaveChangedAvatar = () => {\n        this.setState({...this.state, openAvatarDialogWindow: false})\n        const image = !this.state.isCheckedInitialsCheckbox ? this.state.avatarImageFile : null;\n\n        let data = null;\n        if (image){\n            data = new FormData();\n            data.append(\"image\", image);\n        } else {\n            data = {};\n            data['image'] = image;\n        }\n\n        uploadUserAvatarRequest(this.props.userId, data)\n        .then(response => \n            {\n                this.props.uploadAvatarImage(response.data.image)\n            }\n        )\n        .catch((error) => \n            {\n                console.log(error.response)\n            }\n        )\n    };\n\n    onError = () => {this.setState({...this.state, isImageUploaded: false})};\n\n    handleLogOutButton = () => {this.setState({...this.state, openLogOutDialogWindow: true})};\n    \n    logOut = () => {\n        this.setState({...this.state, openLogOutDialogWindow: false})\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('accessToken');\n        window.location.reload('');\n    }\n\n    selectInitials = () => {\n        this.setState(\n            {\n                ...this.state, \n                isCheckedInitialsCheckbox: !this.state.isCheckedInitialsCheckbox\n            }\n        )\n    };\n\n    render(){\n\n        const styles = {\n            linkStyle: {\n                color: 'rgb(71, 71, 71)',\n                fontFamily: 'system-ui',\n                fontSize: 'large'\n            },\n\n            textField: {\n                width: '100%',\n                marginTop: '1rem',\n                textAligne: 'center',\n                fontSize: 'small',\n                display: 'flex'\n            },\n        }\n\n        const {isImageUploaded, openLogOutDialogWindow} = this.state;\n\n        const titleErrorStyle = (isImageUploaded || _.isEmpty(isImageUploaded)) ? {\n            display: 'none'\n        } : {\n            display: 'flex'\n        }\n\n        return( \n            <div style={{minWidth: '600px', width: '100%'}}>\n                <Header/>\n                <div className='account-body-container'>\n                    <div className='user-info-pane-container'>\n                        <div className='right-img-container'>\n                            <img src={require('./images/bg.svg').default} alt={'background'}/>\n                        </div>\n                        <div className='user-info-and-links-container'>\n                            <div className='user-info'>\n                                <Avatar\n                                    src={this.props.image}\n                                    alt='userIcon'\n                                    style={{\n                                        height: '45px',\n                                        width: '45px',\n                                        backgroundColor: 'rgb(201, 97, 221)',\n                                        marginTop: '-0.2rem',\n                                        fontSize: 'x-large'\n                                    }} \n                                    >   \n                                        {this.getUserInitials()}\n                                </Avatar>\n                                <div className='user-fullname-container'>\n                                    <h3>{ this.props.fullname }</h3>\n                                </div>\n                                <div className='username-container'>\n                                    <p>@{this.props.username}</p>\n                                </div>\n                            </div>\n\n                            <div className='account-navigation-pane'>\n                                <div className='link-container'>\n                                    <HashLink \n                                        to='/account#personal-data'\n                                        style={styles.linkStyle}\n                                        \n                                        >\n                                            Personal data\n                                    </HashLink>\n                                </div>\n                                <div className='link-container'>\n                                    <HashLink \n                                        to='/account#security'\n                                        style={styles.linkStyle}\n                                        >\n                                            Security\n                                    </HashLink>\n                                </div>\n                                <div className='link-container'>\n                                    <button \n                                        to='/account#log-out'\n                                        style={styles.linkStyle}\n                                        onClick={this.handleLogOutButton}\n                                        >\n                                            Log out\n                                    </button>\n\n                                    <Dialog \n                                    open={openLogOutDialogWindow}\n                                    onClose={this.handleCloseDialogWindow('openLogOutDialogWindow')} \n                                    aria-labelledby='form-dialog-title'>\n                                    <DialogTitle>Log out</DialogTitle>\n\n                                    <DialogContent>\n                                        <DialogContentText style={{color: 'rgb(71, 71, 71)'}}>\n                                            Are you sure you want to log out?\n                                        </DialogContentText>\n                                \n                                    </DialogContent>\n                                    <DialogActions>\n                                        <Button \n                                            onClick={this.logOut} \n                                            color='#374549'>\n                                            Yes\n                                        </Button>\n                                        <Button \n                                            onClick={this.handleCloseDialogWindow('openLogOutDialogWindow')} \n                                            color='#374549'>\n                                            No\n                                        </Button>\n                                    </DialogActions>\n                                </Dialog>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='left-img-container'>\n                            <img src={require('./images/bg.svg').default} alt={'background'}/>\n                        </div>\n                    </div>\n                    <div className='personal-data-container' id='personal-data'>\n                       <div className='title'>\n                           <h2>Personal data</h2>\n                       </div>\n                        <div className='change-personal-data-container'>\n                                <div className='text-fields-container'>\n                                    <TextField\n                                        variant='outlined'\n                                        size='small'\n                                        label='Full name'\n                                        defaultValue={this.props.fullname}\n                                        style={styles.textField}\n                                    />\n\n                                    <TextField\n                                        variant='outlined'\n                                        size='small'\n                                        label='Username'\n                                        defaultValue={this.props.username}\n                                        style={styles.textField}\n                                    />\n\n                                    <TextField\n                                        variant='outlined'\n                                        size='small'\n                                        label='email'\n                                        defaultValue={this.props.email}\n                                        style={styles.textField}\n                                    />\n\n                                    <TextField\n                                        variant='outlined'\n                                        size='small'\n                                        label='Organization'\n                                        defaultValue={this.props.organization}\n                                        style={styles.textField}\n                                    />\n\n                                    <TextField\n                                        variant='outlined'\n                                        size='small'\n                                        multiline\n                                        label='About yourself'\n                                        style={styles.textField}\n                                    />\n                            </div>\n\n                            <div className='avatar-container'>\n                                <button \n                                    className='change-avatar-button'\n                                    onClick={this.openChangeAvatarDialogWindow}>\n                                    <p className='h4'>Avatar</p>\n                                    <Avatar\n                                        src={this.props.image}\n                                        alt='userIcon'\n                                        style={{\n                                            height: '8rem',\n                                            width: '8rem',\n                                            backgroundColor: 'rgb(201, 97, 221)',\n                                            fontSize: 'xxx-large',\n                                            marginTop: '0.25rem',\n                                        }} \n                                    >   \n                                        {this.getUserInitials()}\n                                    </Avatar>\n\n                                    <div className='half-round-div'>\n                                        <p>Change</p>\n                                    </div>\n                                </button>\n\n                                <Dialog \n                                    open={this.state.openAvatarDialogWindow}\n                                    onClose={this.handleCloseDialogWindow('openAvatarDialogWindow')} \n                                    aria-labelledby='form-dialog-title'>\n                                    <DialogTitle>\n                                        Change your avatar\n                                        </DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText style={{color: 'rgb(71, 71, 71)'}}>\n                                            You can upload your image or select your initials.\n                                        </DialogContentText>\n\n                                        <div \n                                            style={{display : 'flex'}}\n                                        >\n                                            <div className='avatarDemo'>\n                                                <Avatar\n                                                    src={this.state.avatarImageURL || this.props.image }\n                                                    alt='userIcon'\n                                                    style={{\n                                                        height: '8rem',\n                                                        width: '8rem',\n                                                        backgroundColor: 'rgb(201, 97, 221)',\n                                                        fontSize: 'xxx-large',\n                                                        marginTop: '0.25rem',\n                                                    }} \n                                                >   \n                                                    {this.getUserInitials()}\n                                                </Avatar>\n                                            </div>\n                                            \n                                            <div \n                                                style={{\n                                                        width : '100%',\n                                                        marginTop: '4rem',\n                                                        marginLeft : '2rem'}}\n                                            >\n                                                <div className='subscribe-chekbox'>\n                                                    <input\n                                                        type='checkbox' \n                                                        className='subscribe'\n                                                        onClick={this.selectInitials}\n                                                        checked={this.state.isCheckedInitialsCheckbox}\n                                                    />\n                                                    <label style={{color: 'rgb(71, 71, 71)'}}>\n                                                        &nbsp;Your initials (without avatar)\n                                                    </label> \n                                                </div>\n                                                \n                                                <ImageUploading\n                                                    isClearable\n                                                    onChange={this.handleUploadImage}\n                                                    acceptType={['jpg', 'gif', 'png', 'jpeg']}\n                                                    maxFileSize={5242880}\n                                                    onError={this.onError}\n                                                    >\n                                                    {({onImageUpload}) => {\n                                                        return(\n                                                                <button \n                                                                onClick={onImageUpload}\n                                                                className='upload-image' \n                                                                > \n                                                                    <p>Upload image</p>\n                                                                </button>\n                                                        )\n                                                    }}\n                                                </ImageUploading>\n                                            </div>\n                                        </div>\n\n                                        <DialogContentText style={{color: 'indianred'}}>\n                                            <label \n                                                style={titleErrorStyle}>\n                                                *Problems with uploading the image check that it has \n                                                the correct resolution '.jpg', '.gif', '.png', 'jpeg'\n                                            </label>\n                                        </DialogContentText>\n                                    \n                                    </DialogContent>\n                                    <DialogActions>\n                                        <Button \n                                            onClick={this.handleSaveChangedAvatar} \n                                            color='#374549'>\n                                            Save changes\n                                        </Button>\n                                        <Button \n                                            onClick={this.handleCloseDialogWindow('openAvatarDialogWindow')} \n                                            color='#374549'>\n                                            Close\n                                        </Button>\n                                    </DialogActions>\n                                </Dialog>\n                            </div>\n                        </div>\n                       \n                        <div className='save-changes-button-container'>\n                           <button>\n                               Save changes\n                           </button>\n                        </div>\n                   </div>\n                   \n                   <div className='security-container' id='security'>\n                       <div className='title'>\n                           <h2>Security</h2>\n                           <div className='change-password-container'>\n                                <p>Change your password</p>\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    label='Old password'\n                                    style={styles.textField}\n                                />\n\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    label='New password'\n                                    style={styles.textField}\n                                />\n\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    label='Enter again new password'\n                                    style={styles.textField}\n                                />\n\n                                <div className='save-changes-button-container'>\n                                    <button className='change-password-button'>\n                                        Change password\n                                    </button>\n                                </div>\n                           </div>\n\n                           <div className='verify-email-container'>\n                                <p>Verify your email</p>\n\n                                <div>\n                                    <TextField\n                                        variant='outlined'\n                                        size='small'\n                                        label='email'\n                                        defaultValue={this.props.email}\n                                        style={styles.textField}\n                                    />\n\n                                    <div className='verify-button-container'>\n                                        <button className='verify-button'>\n                                            Verify\n                                        </button>\n                                    </div>\n                                </div>\n                                 \n                           </div>\n                       </div>\n                   </div>\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n       username: state.user.username,\n       fullname: state.user.fullName,\n       email: state.user.email,\n       organization: state.user.organization,\n       image: state.user.userIcon,\n       userId: state.user.userId \n    };\n}\n\nexport default connect(mapStateToProps,{\n    uploadAvatarImage,\n})(Account);","/frontend/src/reducers/boardNew.js",[],"/frontend/src/reducers/addBoard.js",[],"/frontend/src/reducers/user.js",[],"/frontend/src/actions/user.js",["137"],"import axios from 'axios';\nimport { userSignUpRequest, userLoginRequest, userSelfRequest } from '../api/user';\nimport { refreshTokenRequest } from '../api/auth';\n\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\nexport const UPLOAD_AVATAR_IMAGE = 'UPLOAD_AVATAR_IMAGE';\n\nconst fetchUserRequestAction = () => ({\n    type: FETCH_USER_REQUEST,\n});\nconst fetchUserSuccessAction = (data) => ({\n    type: FETCH_USER_SUCCESS,\n    data\n});\nconst fetchUserErrorAction = (message) => ({\n    type: FETCH_USER_ERROR,\n    message\n});\n\nconst uploadAvatarImageAction = (imageURL) => ({\n    type: UPLOAD_AVATAR_IMAGE,\n    imageURL\n})\n\nexport function uploadAvatarImage(imageURL){\n    return dispatch => {\n        dispatch(uploadAvatarImageAction(imageURL))\n    }\n}\n\nexport function fetchUser(){\n    return dispatch => {\n        dispatch(fetchUserRequestAction());\n        userSelfRequest()\n        .then(response => {\n            dispatch(fetchUserSuccessAction(response.data));\n        })\n        .catch(()=> {\n            const errorMessage = \"An error occured while fetching user\";\n            dispatch(fetchUserErrorAction(errorMessage));\n        })\n    }\n} \n\nexport function setAutorizationToken(token){\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = `JWT ${token}`;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\nexport function signUpUser(fullname, email, username, password1, password2){\n\n    return userSignUpRequest(fullname, email, username, password1, password2)\n    .then(() => \n        {\n            return {errors: {}};\n        }\n    )\n    .catch(error => {\n        const data = error.response.data;\n        const errors = {};\n        Object.entries(data).map(([key, value]) => {\n            Object.assign(errors, {[key]: value})\n        });\n        return {errors: errors};\n    });\n    \n}\n\nexport function userLogIn(usernameOrEmail, password){\n    \n    return userLoginRequest(usernameOrEmail, password)\n    .then(async response => \n        {\n            localStorage.setItem('accessToken', response.data.access);\n            localStorage.setItem('refreshToken', response.data.refresh);\n            return true;\n        }\n    )\n    .catch(() => \n        {\n            return false;\n        }\n    )\n}\n\nexport function refreshAuthorizationToken(refreshToken){\n    return refreshTokenRequest(refreshToken)\n        .then(async response => {\n            localStorage.setItem('accessToken', response.data.access);\n            localStorage.setItem('refreshToken', response.data.refresh);\n\n            setAutorizationToken(localStorage.getItem('accessToken'));\n        })\n        .catch(() => {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n        })\n}","/frontend/src/actions/boardList.js",[],"/frontend/src/actions/board.js",[],"/frontend/src/api/user.js",[],"/frontend/src/App/Login/index.js",[],"/frontend/src/api/auth.js",[],"/frontend/src/App/Header/index.js",[],"/frontend/src/App/CreateNewBoard/UploadImage/index.js",[],"/frontend/src/App/Footer/index.js",[],"/frontend/src/App/Home/BoardItem/index.js",[],"/frontend/src/App/CreateNewBoard/BackgroundItem/index.js",[],"/frontend/src/App/CreateNewBoard/BoardDemoColumn/index.js",[],"/frontend/src/api/board.js",[],"/frontend/src/App/Header/NavBar/index.js",[],"/frontend/src/App/Header/NavBar/BoardsPopup/index.js",[],"/frontend/src/App/Header/NavBar/SearchPopup/index.js",[],"/frontend/src/App/Header/NavBar/BoardsPopup/Favourites/index.js",[],"/frontend/src/App/Header/NavBar/BoardsPopup/FreqVisited/index.js",[],["138","139"],"/frontend/src/App/Header/NavBar/BoardsPopup/Personal/index.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":16,"column":34,"nodeType":"146","messageId":"147","endLine":16,"endColumn":49},{"ruleId":"148","severity":1,"message":"149","line":66,"column":49,"nodeType":"150","messageId":"151","endLine":66,"endColumn":51},{"ruleId":"140","replacedBy":"152"},{"ruleId":"142","replacedBy":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'userSelfRequest' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["154"],["155"],"no-global-assign","no-unsafe-negation"]